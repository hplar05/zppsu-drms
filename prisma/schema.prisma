generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  username     String         @unique
  password     String
  name         String
  mobileNumber String
  image        String?
  course       String
  studId       String
  requestForm  RequestForm[]
  announcement Announcement[]
  role         Role           @default(STUDENT)
  isApprove    Boolean        @default(false)
  proofOfID    String?
  yearAttended String?
  semmester    String?
  createdAt    DateTime       @default(now())
  updateUt     DateTime       @updatedAt
}

enum Role {
  STUDENT
  GRADUATE_STUDENT
  IRREGULAR
  ADMIN
  SUPERADMIN
}

enum Course {
  BSIT
  BSAT
  BSET
  BSEIexT
  BSMT
  BSCRACT
  BSCompTech
  BSEntrep
  BSHM
  BSInfoTech
  BSMarE
  BSDevcom
  BFA
}

enum RegistrarForms {
  Enrollment_Form
  Diploma
  TOR
  Report_of_Grades
  Certificate_of_Transfer
  Application_of_Cross_Enrollment
  Certificate_of_Enrollment
  Request_Form_for_Students_Permanent_Record
  Evaluation_Form
  Request_Form_for_Document_Issurance
  Students_List
  College_Students_Permanent_Record
  Application_Form_for_Graduation
  Completion_Removal_Form
  Prospectus
  Enrollment_List
}

model RequestForm {
  id               Int      @id @default(autoincrement())
  studentId        String
  nameOfStudent    String
  course           String
  mobileNumber     String
  email            String
  yearAndsection   String
  purposeOfrequest String
  userId           String
  attachment       String?
  adminMessage     String?
  payslipUrl       String?
  user             User     @relation(fields: [userId], references: [id])
  action           Action   @default(PENDING)
  requestChoices   String?
  createdAt        DateTime @default(now())
  updateUt         DateTime @updatedAt
}

enum Action {
  PENDING
  DECLINE
  APPROVE_PENDING_PAYMENT
  PAID
  COMPLETED
}

model ArchiveRequest {
  id               Int      @id @default(autoincrement())
  studentId        String
  nameOfStudent    String
  course           String
  mobileNumber     String
  email            String
  yearAndsection   String
  purposeOfrequest String
  userId           String
  attachment       String?
  // adminMessage     String?
  action           Action   @default(COMPLETED)
  requestChoices   String?
  createdAt        DateTime @default(now())
  updateUt         DateTime @updatedAt
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  body      String
  adminId   String
  user      User     @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  updateUt  DateTime @updatedAt
}
